import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import './Profile.css';
import user_icon from '../Assets/person.png';
import email_icon from '../Assets/email.png';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Header from '../Header/Header';

export default function Profile() {
  const [userData, setUserData] = useState(null);
  const [isEditMode, setIsEditMode] = useState(false);
  const [editedUsername, setEditedUsername] = useState('');
  const [editedEmail, setEditedEmail] = useState('');

  useEffect(() => {
    fetchProfileData();
  }, []);

  const fetchProfileData = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('No token found');
        return;
      }
      const headers = {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      };
      const response = await axios.get('http://localhost:3001/user/api/profile', { headers });
      const data = response.data;
      setUserData(data);
      setEditedUsername(data.user.username);
      setEditedEmail(data.user.email);
    } catch (error) {
      console.error('Error fetching user profile:', error);
    }
  };

  const handleEditClick = (e) => {
    e.preventDefault();
    setIsEditMode(true);
  };
  
  const handleSaveClick = useCallback(async (e) => {
    try {
      e.preventDefault();
  
      if (!editedUsername || !editedEmail) {
        toast.error('Username and Email are mandatory.');
        return;
      }
  
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('No token found');
        return;
      }
  
      const headers = {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      };
  
      const response = await axios.put('http://localhost:3001/user/api/profile', {
        username: editedUsername,
        email: editedEmail
      }, { headers });
  
      const data = response.data;
      setUserData(data);
      setIsEditMode(false);
      toast.success('Profile updated successfully');
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error('Failed to update profile');
    }
  }, [editedUsername, editedEmail]);

  return (
    <div>
      <Header />
      <form className="login-form">
        <div className="container-main-page17">
          <div className="main7">
            <div className="left-side7"></div>
            <div className="right-container7">
              <div className="action-text7">
                <div className="text-action-main7">Profile</div>
              </div>
              <div className="right-inputs7">
                {userData ? (
                  <div className="profile-section7">
                    <div className="input7">
                      <h4><label htmlFor="username">Username:</label><span className="mandatory">*</span></h4>
                      <div className="input-wrapper">
                        <img src={user_icon} alt="" className="img7" />
                        <input
                          type="text"
                          id="username"
                          placeholder="Enter your username"
                          value={editedUsername}
                          onChange={(e) => setEditedUsername(e.target.value)}
                          readOnly={!isEditMode}
                        />
                      </div>
                    </div>
                    <div className="input7">
                      <h4><label htmlFor="email">Email:</label><span className="mandatory">*</span></h4>
                      <div className="input-wrapper">
                        <img src={email_icon} alt="" className="img7" />
                        <input
                          type="email"
                          id="email"
                          placeholder="Enter your email"
                          value={editedEmail}
                          onChange={(e) => setEditedEmail(e.target.value)}
                          readOnly={!isEditMode}
                        />
                      </div>
                    </div>
                    <div className="input7">
                      <h4><label htmlFor="firstName">First Name:</label></h4>
                      <div className="input-wrapper">
                        <input
                          type="text"
                          id="firstName"
                          placeholder="Enter your first name"
                          readOnly={!isEditMode}
                        />
                      </div>
                    </div>
                    <div className="input7">
                      <h4><label htmlFor="lastName">Last Name:</label></h4>
                      <div className="input-wrapper">
                        <input
                          type="text"
                          id="lastName"
                          placeholder="Enter your last name"
                          readOnly={!isEditMode}
                        />
                      </div>
                    </div>
                    <div className="button-container">
                      {isEditMode ? (
                        <>
                          <button className="save-button" onClick={handleSaveClick}>Save</button>
                          <button className="cancel-button" onClick={() => setIsEditMode(false)}>Cancel</button>
                        </>
                      ) : (
                        <button className="edit-button" onClick={handleEditClick}>Edit</button>
                      )}
                    </div>
                  </div>
                ) : (
                  <p>Loading...</p>
                )}
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  );
}
